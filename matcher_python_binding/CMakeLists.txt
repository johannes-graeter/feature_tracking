#pkg_version=1.4.1
cmake_minimum_required(VERSION 2.8.3)
project(matcher_python_binding)

find_package(mrt_cmake_modules REQUIRED)
include(UseMrtStdCompilerFlags)
include(UseMrtAutoTarget)

include(GatherDeps)
# Remove libs which cannot be found automatically
#list(REMOVE_ITEM DEPENDEND_PACKAGES <package name 1> <package name 2> ...)
find_package(AutoDeps REQUIRED COMPONENTS ${DEPENDEND_PACKAGES})

FIND_PACKAGE(PythonInterp)
FIND_PACKAGE(PythonLibs)
#if(${PYTHON_VERSION_MAJOR} EQUAL 3)
# FIND_PACKAGE(Boost COMPONENTS python3 numpy3 system)
#else()
FIND_PACKAGE(Boost COMPONENTS python numpy)
#endif()

############################
## read source code files ##
############################
file(GLOB_RECURSE PROJECT_HEADER_FILES_INC RELATIVE "${CMAKE_CURRENT_LIST_DIR}" "include/*.h" "include/*.hpp")
file(GLOB PROJECT_SOURCE_FILES_INC RELATIVE "${CMAKE_CURRENT_LIST_DIR}" "src/*.h" "src/*.hpp")
file(GLOB PROJECT_SOURCE_FILES_SRC RELATIVE "${CMAKE_CURRENT_LIST_DIR}" "src/*.cpp")

if (PROJECT_SOURCE_FILES_SRC)
    set(LIBRARY_NAME ${PROJECT_NAME})
endif()

###################################
## catkin specific configuration ##
###################################
# The catkin_package macro generates cmake config files for your package
# Declare things to be passed to dependent projects
# INCLUDE_DIRS: uncomment this if you package contains header files
# LIBRARIES: libraries you create in this project that dependent projects also need
# CATKIN_DEPENDS: catkin_packages dependent projects also need
# DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include ${mrt_EXPORT_INCLUDE_DIRS}
  LIBRARIES ${LIBRARY_NAME} ${mrt_EXPORT_LIBRARIES}
  CATKIN_DEPENDS ${catkin_EXPORT_DEPENDS}
)


###########
## Build ##
###########
# Add include and library directories
include_directories(
    include/${PROJECT_NAME}
    ${mrt_INCLUDE_DIRS}
    ${catkin_INCLUDE_DIRS}
    ${BoostPython_INCLUDE_DIRS}
    ${PYTHON_INCLUDE_DIRS} 
    )

link_directories(
    ${mrt_LIBRARY_DIRS}
    ${catkin_LIBRARY_DIRS}
    ${BoostPython_LIBRARY_DIRS}
    ${PYTHON_LIBRARY_DIRS}
    )

#add_library (matcher src/mono_matcher_binding.cpp)

# Declare a cpp library
#mrt_add_library(${PROJECT_NAME}
mrt_add_library(matcher
    INCLUDES ${PROJECT_HEADER_FILES_INC} ${PROJECT_SOURCE_FILES_INC} 
    SOURCES ${PROJECT_SOURCE_FILES_SRC}
    LIBRARIES boost_python boost_numpy
    # LIBRARIES boost_python3 boost_numpy3
    )


# Suppress prefix "lib" because Python does not allow this prefix
set_target_properties(matcher PROPERTIES PREFIX "")

#############
## Install ##
#############
# Install all targets, headers by default and scripts and other files if specified (folders or files)
mrt_install(PROGRAMS scripts FILES res data)
